openapi: 3.0.3
info:
  title: Authentication Service API
  version: 1.0.0
  description: |
    Microservicio de autenticación y gestión de usuarios.
    Incluye registro, login y obtención de información de usuario.
servers:
  - url: http://localhost:8000
    description: Servidor local de desarrollo

tags:
  - name: Authentication
    description: Operaciones de registro y login
  - name: Users
    description: Gestión de usuarios (protegidas)

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              name: "Juan Pérez"
              email: "juan@example.com"
              password: "SecurePass123"
              phone_number: "+549114567890"
              roles: ["user"]
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Iniciar sesión de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required: [email, password]
            example:
              email: "juan@example.com"
              password: "SecurePass123"
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/{id}:
    get:
      tags: [Users]
      summary: Obtener información de usuario
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Información del usuario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    CreateUserRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        phone_number:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        roles:
          type: array
          items:
            type: string
            enum: [user, admin]
          default: ["user"]

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
        name:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string
        roles:
          type: array
          items:
            type: string

  responses:
    BadRequest:
      description: Solicitud inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Credenciales inválidas o token faltante
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflicto (email ya registrado)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Usuario no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "error"
        error:
          type: string
          example: "Invalid email format"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Usar token JWT obtenido del login