version: '3.8'

services:
  auth-service:
    build: ./auth-service
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}  
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RATE_LIMIT=${RATE_LIMIT}
      - TOKEN_EXPIRATION=${TOKEN_EXPIRATION}
    depends_on:
      - mongo
    networks:
      - shop-nexus-core
  
  product-service:
    build: ./product-service
    ports:
      - "8001:8001"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RATE_LIMIT=${RATE_LIMIT}
    depends_on:
      - mongo
    networks:
      - shop-nexus-core

  order-service:
    build: ./order-service
    ports:
      - "8002:8002"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DB_NAME=${DB_NAME}
      - RABBITMQ_URI=${RABBITMQ_URI} 
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RATE_LIMIT=${RATE_LIMIT}
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      shop-nexus-core:
        aliases:
          - order-service

  recommendation-service:
    build: ./recommendation-service
    ports:
      - "8003:8003"
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - RABBITMQ_URI=${RABBITMQ_URI}
      - DB_NAME=${DB_NAME}
      - TRAIN_INTERVAL=10  # Entrenar cada 100 Ã³rdenes
    volumes:
      - model-data:/app  # Persistir el modelo entrenado
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - shop-nexus-core

  notification-service:
    build: ./notification-service
    ports:
      - "8004:8004"
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - FLASK_ENV=production
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - shop-nexus-core
    
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 20
    networks:
      - shop-nexus-core

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shop-nexus-core
  
networks:
  shop-nexus-core:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongo-data:
  model-data: